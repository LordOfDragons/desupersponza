/**
 * MIT License
 * 
 * Copyright (c) 2022 DragonDreams GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Behavior showing/hiding VR menu element.
 */
class ECBVRMenu extends DefaultECBehavior
	/** instance. */
	class Instance extends DefaultECBehaviorInstance
		protected var Element vrmenu
		
		/**
		 * Create behavior instance.
		 */
		public func new(ECBVRMenu ecbehavior, BehaviorElement element) super(element)
		end
		
		/**
		 * Menu is visible.
		 */
		public func bool isMenuVisible()
			return vrmenu != null and vrmenu.getVisible()
		end
		
		/**
		 * Show menu in front of hand controller if hidden.
		 */
		public func void showMenu(ECBehaviorVRHand.Instance instance)
			if vrmenu == null or vrmenu.getVisible()
				return
			end
			
			var DMatrix matrix = DMatrix.newRT(DVector.new(10, 180, 0), DVector.new(0, 0, 0.1)) * instance.getMatrix()
			vrmenu.setGeometry(matrix.getPosition(), matrix.toQuaternion())
			vrmenu.setVisible(true)
		end
		
		/**
		 * Hide menu if visible.
		 */
		public func void hideMenu()
			if vrmenu != null
				vrmenu.setVisible(false)
			end
		end
		
		/**
		 * Toggle menu visibility.
		 */
		public func void toggleVisible(ECBehaviorVRHand.Instance instance)
			if vrmenu != null
				if vrmenu.getVisible()
					hideMenu()
				else
					showMenu(instance)
				end
			end
		end
		
		/**
		 * Player added to game world. Create and add VR menu but hidden.
		 */
		public func void addToGameWorld()
			if vrmenu != null
				return
			end
			
			vrmenu = StubElement.new(GameApp.get().getElementClassList().getNamed("VRMenu"),\
				GameApp.get().getIDGenerator().nextID()).createElement()
			vrmenu.setVisible(false)
			getElement().getGameWorld().addElement(vrmenu)
		end
		
		/**
		 * Player removed from game world. Remove VR menu and dispose of it.
		 */
		public func void removeFromGameWorld()
			if vrmenu == null
				return
			end
			
			vrmenu.safeDispose()
			vrmenu = null
		end
	end
	
	
	/**
	 * Create behavior.
	 */
	public func new(BehaviorElementClass eclass) super(eclass)
		eclass.addBehavior(this)
	end
	
	
	/**
	 * Get instance in element from owner element class.
	 */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(this.getInstanceIndex()) cast Instance
	end
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
