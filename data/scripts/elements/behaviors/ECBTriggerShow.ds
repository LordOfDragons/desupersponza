/**
 * MIT License
 * 
 * Copyright (c) 2022 DragonDreams GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

pin Dragengine.LoadSave
pin Dragengine.Scenery
pin Dragengine.Preloading
pin Dragengine.Utils


/**
 * Behavior showing/hiding element if triggered. Property is named "trigger(show)".
 */
class ECBTriggerShow extends DefaultECBehavior
	/** instance. */
	class Instance extends DefaultECBehaviorInstance implements ECBehaviorTriggered.Listener
		protected var ECBehaviorTriggered.Instance triggered
		
		/** Create behavior instance. */
		public func new(ECBTriggerShow ecbehavior, BehaviorElement element) super(element)
			triggered = ecbehavior.triggered.instance(element)
			triggered.addListener(this)
		end
		
		/** Dispose of behavior instance. */
		public func void dispose()
			triggered = null
			super.dispose()
		end
		
		/** Trigger evaluates to true. */
		public func void triggerExpressionTrue(ECBehaviorTriggered.Instance instance)
			getElement().setVisible(true)
		end
		
		/** Trigger evaluates to false. */
		public func void triggerExpressionFalse(ECBehaviorTriggered.Instance instance)
			getElement().setVisible(false)
		end
	end
	
	
	public var ECBehaviorTriggered triggered
	
	
	/** Create behavior. */
	public func new(BehaviorElementClass eclass) super(eclass)
		triggered = ECBehaviorTriggered.new(eclass, "show")
		eclass.addBehavior(this)
	end
	
	/** Dispose of behavior. */
	public func void dispose()
		triggered = null
		super.dispose()
	end
	
	
	/** Get instance in element from owner element class. */
	public func Instance instance(BehaviorElement element)
		return element.getInstanceAt(this.getInstanceIndex()) cast Instance
	end
	
	
	/** Create Behavior instance. */
	public func ECBehaviorInstance createInstance(BehaviorElement element)
		return Instance.new(this, element)
	end
end
