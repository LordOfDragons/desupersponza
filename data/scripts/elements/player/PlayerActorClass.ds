/**
 * MIT License
 * 
 * Copyright (c) 2022 DragonDreams GmbH
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

pin Dragengine.Commands
pin Dragengine.Gui
pin Dragengine.Scenery

/**
 * Player actor element class.
 */
public class PlayerActorClass extends BaseActorClass
	public static var String footstepsWalk = "walk"
	public static var String footstepsRun = "run"
	
	public var ECBehaviorLookAt lookAt
	public var ECBehaviorPlayerLookAtInteractPrompt playerLookAtInteractPrompt
	
	public var ECPSoundList footStepSounds
	public var ECBTeleportPlayer teleportPlayer
	
	
	/**
	 * Create element class.
	 */
	public func new() super("PlayerActor")
		// Set up actor for conversation use
		getConversationActor().getActorId().setValue("player")
		getConversationActor().getName().setValue(UnicodeString.newFromUTF8("Player"))
		getConversationActor().getRegisterConversationActor().setValue(true)
		
		// Support physical objects being pushed by the actor
		getComponent().getComponent().getRig().setPath("/content/models/player/player.derig")
		
		// Track what element the player is looking at
		lookAt = ECBehaviorLookAt.new(this, getColliderAI(), getComponent(), getLocomotion())
		
		// Add support to show interaction prompts on screen
		var BindingManager bindingManager = BaseGameApp.getApp().getBindingManager()
		var CommandManager commandManager = BaseGameApp.getApp().getCommandManager()
		var Container uiContainer = BaseGameApp.getApp().getPanelHud().getCenter()
		var ECBehaviorPlayerLookAtInteractPrompt.PromptControllerFactory controller = \
			PanelInteractPromptController.ControllerFactory.new()
		
		playerLookAtInteractPrompt = ECBehaviorPlayerLookAtInteractPrompt.new( this, \
			getPlayerControllable(), lookAt, controller, \
			uiContainer, null, commandManager, bindingManager)
		
		// Set default actor action. When done in element class a factory has to be used
		getAIAction().setActionFactory(PlayerAction.Factory.new())
		
		// Foot step sounds to play. Randomly chosen
		footStepSounds = ECPSoundList.new("footStepSounds")
		footStepSounds.addPath("/content/sound/footstep1.ogg")
		footStepSounds.addPath("/content/sound/footstep2.ogg")
		footStepSounds.addPath("/content/sound/footstep3.ogg")
		footStepSounds.addPath("/content/sound/footstep4.ogg")
		footStepSounds.addPath("/content/sound/footstep5.ogg")
		footStepSounds.addPath("/content/sound/footstep6.ogg")
		addProperty(footStepSounds)
		
		// Teleport player support
		teleportPlayer = ECBTeleportPlayer.new(this)
	end
	
	
	/**
	 * Overrides BaseActorClass.createElement(). Create subclass of BaseActor for convenience.
	 */
	protected func Element createElement()
		return PlayerActor.new(this)
	end
end
